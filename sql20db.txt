-- db loomine * 
create database Titpv20lisa

-- db kustutamine *
DRop DataBase Titpv20lisa

--- teeme tabeli *
create table Baraban
(
Id int NOT NULL primary key,
Baraban nvarchar(10) not null
)

create table Herson 
(
Id int not null primary key,
Name nvarchar(25),
Email nvarchar(30),
BarabanId int
)

--- andmete sisestamine tabelisse *
insert into Baraban (Id, Baraban)
values (1, 'Female')
insert into Baraban (Id, Baraban)
values (2, 'Male')

--- nüüd saab kasutada ainult Baraban tabelis olevaid väärtuseid *
alter table Herson add constraint tblHerson_BarabanId_FK
foreign key (BarabanId) references Baraban(Id)

-- sisestame andmed
insert into Herson (Id, Name, Email, BarabanId)
values (1, 'Supermees', 's@s.com', 2)
insert into Herson (Id, Name, Email, BarabanId)
values (2, 'Wonderwoman', 'w@w.com', 1)
insert into Herson (Id, Name, Email, BarabanId)
values (3, 'Batman', 'b@b.com', 2)
insert into Herson (Id, Name, Email, BarabanId)
values (4, 'Aquaman', 'a@a.com', 2)
insert into Herson (Id, Name, Email, BarabanId)
values (5, 'Catwoman', 'c@c.com', 1)
insert into Herson (Id, Name, Email, BarabanId)
values (6, 'Antman', 'ant"ant.com', 2)
insert into Herson (Id, Name, Email, BarabanId)
values (7, 'Spiderman', 'spider@spiderman.com', 2)

-- vaatame tabeli andmeid
select * from Herson

--- võõrvõtme piirangu maha võtmine
alter table Herson
drop constraint tblHerson_BarabanId_FK

-- sisestame väärtuse tabelisse
insert into Baraban (Id, Baraban)
values (3, 'Unknown')
-- lisame võõrvõtme uuesti
alter table Herson
add constraint DF_Herson_BarabanId
default 3 for BarabanId


---- 2 tund

select * from Herson
select * from Baraban

insert into Herson (Id, Name, Email)
values (8, 'Test', 'Test')

---lisame uue veeru tabelisse
alter table Herson
add Age nvarchar(10)

--uuendame andmeid
update Herson
set Age = 149
where Id = 8

-- veerule piirnagu panemine
alter table Herson
add constraint CK_Herson_Age check (Age > 0 and Age < 150)

insert into Herson (Id, Name, Email, BarabanId, Age)
values (9, 'Test', 'Test', 2, 160)

--rea kustutamine
select * from Herson
go
delete from Herson where Id = 8
go
select * from Herson

--- lisame veeru juurde
alter table Herson
add City nvarchar(25)

-- tahame tead kõiki, kes elavad Gothami linnas 
select * from Herson where City = 'Gotham'
-- kõik, kes ei ela Gothamis
select * from Herson where City <> 'Gotham'
select * from Herson where City != 'Gotham'

-- näitab teatud vanusega inimesi
select *from Herson where Age = 100 or 
Age = 50 or Age = 20
select * from Herson where Age in (100, 50, 20)

--- näitab teatud vanusevahemikus olevaid inimesi
select * from Herson where Age between 30 and 50

--- wildcard e näitab kõik g-tähega linnad
select * from Herson where City like 'n%'
select * from Herson where Email like '%@%'

-- n'itab kõiki, kellel ei ole @-märki emailis
select * from Herson where Email not like '%@%'

--- näitab, kelle on emailis ees ja peale @-märki
-- ainult üks täht
select * from Herson where Email like '_@_.com'

--- kõik, kellel ei ole nimes esimene täht W, A ja S
select * from Herson where Name like '[^WAS]%'

--- kes elavad Gothamis ja New Yorkis
select * from Herson where (City = 'Gotham' or City = 'New York')

--- kõik, kes elevad välja toodud linnades ja on vanemad kui 40 a
select * from Herson where (City = 'Gotham' or City = 'New York')
and Age >= 40

-- kuvab tähestikulises järjekorras inimesi ja võtab aluseks Name veeru
select * from Herson order by Name
--- kuva vastupidises järjestuses
select * from Herson order by Name desc

---võtab kolm esimest rida
select top 3 * from Herson

--- kolm esimest, aga tabeli järjestus on Age ja siis Name
select * from Herson
select top 3 Age, Name from Herson

--- näitab esimesed 50% tabelis
select top 50 percent * from Herson

-- järjestab vanuse järgi isikud
select * from Herson order by cast(Age as int)
select * from Herson order by Age

-- kõikide isikute koondvanus
select sum(cast(Age as int)) from Herson

--- kuvab kõige nooremat isikut
select min(cast(Age as int)) from Herson
--- kõige vanem isik
select max(cast(Age as int)) from Herson

select City, sum(cast(Age as int)) as TotalAge from Herson group by City





--- tund 3

--- loome uued tabelid
create table Department
(
Id int primary key,
DepartmentName nvarchar(50),
Location nvarchar(50),
DepartmentHead nvarchar(50)
)

create table Employees
(
Id int primary key,
Name nvarchar(50),
Baraban nvarchar(10),
Salary nvarchar(50),
DepartmentId int
)

---sisestame andmed
insert into Department (Id, DepartmentName, Location, DepartmentHead)
values (1, 'IT', 'London', 'Rick')
insert into Department (Id, DepartmentName, Location, DepartmentHead)
values (2, 'Payroll', 'Delhi', 'Ron')
insert into Department (Id, DepartmentName, Location, DepartmentHead)
values (3, 'HR', 'New York', 'Christie')
insert into Department (Id, DepartmentName, Location, DepartmentHead)
values (4, 'Other Deparment', 'Sydney', 'Cindrella')

select * from Department

insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (1, 'Tom', 'Male', 4000, 1)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (2, 'Pam', 'Female', 3000, 1)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (3, 'John', 'Male', 3500, 1)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (4, 'Sam', 'Male', 4500, 2)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (5, 'Todd', 'Male', 2800, 1)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (6, 'Ben', 'Male', 7000, 1)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (7, 'Sara', 'Female', 4800, 3)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (8, 'Valarie', 'Female', 5500, 1)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (9, 'James', 'Male', 6500, NULL)
insert into Employees (Id, Name, Baraban, Salary, DepartmentId)
values (10, 'Russell', 'Male', 8800, NULL)

select * from Employees

--- saan ainult selles tabelis olevad veerud
select distinct Name, DepartmentId from Employees

--- arvutame k]ikide palgad kokku
select sum(cast(Salary as int)) from Employees
--- k]ige v'iksema palga saaja
select min(cast(Salary as int)) from Employees


alter table Employees
add City nvarchar(25)


alter table Employees
add DepartmentId
int null


--- lisame tabelid
alter table Employees
add MiddleName nvarchar(30)

alter table Employees
add LastName nvarchar(30)

update Employees set FirstName = 'Tom', MiddleName = 'Nick', LastName = 'Jones'
where Id = 1
update Employees set FirstName = 'Pam', MiddleName = NULL, LastName = 'Anderson'
where Id = 2
update Employees set FirstName = 'John', MiddleName = NULL, LastName = NULL
where Id = 3
update Employees set FirstName = 'Sam', MiddleName = NULL, LastName = 'Smith'
where Id = 4
update Employees set FirstName = NULL, MiddleName = 'Todd', LastName = 'Someone'
where Id = 5
update Employees set FirstName = 'Ben', MiddleName = 'Ten', LastName = 'Sven'
where Id = 6
update Employees set FirstName = 'Sara', MiddleName = NULL, LastName = 'Connor'
where Id = 7
update Employees set FirstName = 'Valarie', MiddleName = 'Balerine', LastName = NULL
where Id = 8
update Employees set FirstName = 'James', MiddleName = '007', LastName = 'Bond'
where Id = 9
update Employees set FirstName = NULL, MiddleName = NULL, LastName = 'Crowe'
where Id = 10


--- igast reast võtab esimeses veerus täidetud lahtri ja kuvab ainult seda
select Id, coalesce(FirstName, MiddleName, LastName) as Name
from Employees

select * from Employees
select * from Department





--- loome stored procedure, mis kuvab vaate
create procedure spGetEmployees
as begin
	select FirstName, Baraban from Employees
end

spGetEmployees
exec spGetEmployees
execute spGetEmployees

--- 
create proc spGetEmployeesByBarabanAndDepartment
@Baraban nvarchar(20),
@DepartmentId int
as begin
	select FirstName, Baraban, DepartmentId from Employees where Baraban = @Baraban
	and DepartmentId = @DepartmentId
end

--- kõik esimeses osakonnas meessoost töötavad isikud
spGetEmployeesByBarabanAndDepartment 'Male', 1

spGetEmployeesByBarabanAndDepartment @DepartmentId =  1, @Baraban = 'Male'




create proc spGetEmployeeCountByBaraban
@Baraban nvarchar(20),
@EmployeeCount int output
as begin
	select @EmployeeCount = count(Id) from Employees where Baraban = @Baraban
end

-- annab teada, palju on meessoost isikuid ning kuvab vastava stringi
declare @TotalCount int
exec spGetEmployeeCountByBaraban 'Female', @TotalCount out
if(@TotalCount = 0)
	print '@TotalCount is null'
else
	print '@TotalCount is not null'
print @TotalCount

-- annab teada, palju on meessoost isikuid
declare @TotalCount int
exec spGetEmployeeCountByBaraban @EmployeeCount = @TotalCount out, @Baraban = 'Male'
print @TotalCount

---- annab kogu tabeli ridade arvu
create proc spTotalCount2
@TotalCount int output
as begin
	select @TotalCount = count(Id) from Employees
end
--- käivitame sp
declare @TotalEmployees int
execute spTotalCount2 @TotalEmployees output
select @TotalEmployees

--- mis id all on keegi nime järgi
create proc spGetNameById1
@Id int,
@FirstName nvarchar(50) output
as begin
	select @FirstName = FirstName from employees where Id = @Id
end

--- käivitame sp
declare @FirstName nvarchar(50)
execute spGetNameById1 6, @FirstName output
print 'Name of the employee = ' + @FirstName


create proc spGetNameById2
@Id int
as begin
	return (select FirstName from Employees where Id = @Id)
end
-- tuleb veatead kuna kutsusime välja int-i, aga Tom on string
declare @EmployeeName nvarchar(50)
exec @EmployeeName = spGetNameById2 1
print 'Name of the employee = ' + @EmployeeName

select * from Employees

--tund 4 --- trigger

-- triggereid on kolme tüüpi
--1. DML trigger
--2. DDL trigger
--3. LOGON trigger

--- trigger on eriliik stored procedure-st. Kui mingi tegevus leiab andmebaasis aset,
--- siis serveris tehakse ka midagi.

--- DML - data manipulation manipulation
--- DML-i peamised käsud: Insert, Update ja Delete

-- after trigger:  käivitub peale mingit tegevust
-- instead trigger: käivitub enne triggeri tegevuse toimumist
create database TITpv22

create table EmployeeTrigger
(
Id int primary key,
Name varchar(30),
Salary int,
Baraban nvarchar(10),
DepartmentId int
)


insert into EmployeeTrigger values(1, 'John', 5000, 'Male', 3)
insert into EmployeeTrigger values(2, 'Mike', 3400, 'Male', 2)
insert into EmployeeTrigger values(3, 'Pam', 6000, 'Female', 1)
insert into EmployeeTrigger values(4, 'Todd', 4800, 'Male', 4)
insert into EmployeeTrigger values(5, 'Sara', 3200, 'Female', 1)
insert into EmployeeTrigger values(6, 'Ben', 4800, 'Male', 3)

create table EmployeeAudit
(
Id int identity(1, 1) primary key,
AuditData nvarchar(1000)
)


--- nüüd teeme triggeri, et kui sisestan uue töötaja EmployeeTrigger tabelisse,
--- siis EmployeeAudit tabelisse tulevad andmed

--trigger
create trigger tr_Employee_ForInsert
on EmployeeTrigger
for insert
as begin
	declare @Id int
	select @Id = Id from inserted

	insert into EmployeeAudit
	values('New employee with Id = ' + cast(@Id as nvarchar(5)) 
	+ ' is added at ' + cast(Getdate() as nvarchar(20)))
end

insert into EmployeeTrigger values(7, 'Jimmy', 1800, 'Male', 3)

select * from EmployeeAudit

--- peale kustutamist tekiks info EmployeeAudit tabelisse
create trigger EmployeeForDelete
on EmployeeTrigger
for delete
as begin
	declare @Id int
	select @Id = Id from deleted
	
	insert into EmployeeAudit
	values('An existing employee with Id = ' + CAST(@Id as nvarchar(5))
	+ ' is deleted at ' + cast(GETDATE()as nvarchar(20)))
end

delete from EmployeeTrigger where Id = 7

select * from EmployeeAudit

--- after trigger
-- kasutavad kahte tabelit, milleks on INSERTED ja DELETED

-- after trigger näide
create trigger trEmployeeForUpdate
on EmployeeTrigger
for update
as begin
	select * from deleted
	select * from inserted
end

update EmployeeTrigger set Name = 'Todd', Salary = 2345,
Baraban = 'Male' where Id = 4


--- teeme update triggeri korda
create trigger trEmployeeForUpdate
on EmployeeTrigger
for update
as begin
	-- deklareerisime muutujad, mida hakkame kasutama
	Declare @Id int
	declare @OldName nvarchar(30), @NewName nvarchar(30)
	declare @OldSalary int, @NewSalary int
	declare @OldBaraban nvarchar(10), @NewBaraban nvarchar(10)
	declare @OldDeptId int, @NewDeptId int
	-- muutuja, millega hakkame ehitama audit build-i
	declare @AuditString nvarchar(1000)
	-- sisestab andmed temp table-sse
	select * into #TempTable
	from inserted

	while(exists(select Id from #TempTable))
	begin
		-- tühja stringi initsialiserimine
		Set @AuditString = ''

		-- selekteerime esimese rea andmed temp table-st 
		select top 1 @Id = Id, @NewName = Name,
		@NewBaraban = Baraban, @NewSalary = Salary,
		@NewDeptId = DepartmentId
		from #TempTable

		-- selekteerib käesoleva rea kustutatud tabelist
		select @OldName = Name,
		@OldBaraban = Baraban, @OldSalary = Salary,
		@OldDeptId = DepartmentId
		from deleted where Id = @Id

		--- ehitame audit stringi dünaamiliseks
		set @AuditString = 'Employee with Id = ' + cast(@Id as nvarchar(4))
		+ ' changed '

		if(@OldName <> @NewName)
			set @AuditString = @AuditString + ' Name from ' + @OldName + ' to '
			+ @NewName

		if(@OldBaraban <> @NewBaraban)
			set @AuditString = @AuditString + ' Baraban from ' + @OldBaraban + ' to '
			+ @OldBaraban

		if(@OldSalary <> @NewSalary)
			set @AuditString = @AuditString + ' Salary from ' 
			+ CAST(@OldSalary as nvarchar(10))
			+ ' to ' + CAST(@NewSalary as nvarchar(10))

		if(@OldDeptId <> @NewDeptId)
			set @AuditString = @AuditString + ' DepartmentId from ' 
			+ CAST(@OldDeptId as nvarchar(10))
			+ ' to ' + CAST(@NewDeptId as nvarchar(10))

		insert into EmployeeAudit values(@AuditString)

		-- kustutab kogu info temp table-st
		delete from #TempTable where Id = @Id
	end
end

select * from EmployeeTrigger

update EmployeeTrigger set Name = 'Todd123', Salary = 3456,
Baraban = 'Female', DepartmentId = 3 
where Id = 4

select * from EmployeeTrigger
select * from EmployeeAudit


create table Department
(
Id int primary key,
DeptName nvarchar(20)
)

insert into Department values(1, 'IT')
insert into Department values(2, 'Payroll')
insert into Department values(3, 'HR')
insert into Department values(4, 'Admin')


-- enne triggeri tegemist tuleb teha vaade
create view vEmployeeDetails
as
select EmployeeTrigger.Id, Name, Baraban, DeptName
from EmployeeTrigger
join Department
on EmployeeTrigger.DepartmentId = Department.Id



---- instead of insert trigger
create trigger trEmployeeDetailsInsteadOfInsert
on vEmployeeDetails
instead of insert
as begin
	declare @DeptId int

	select @DeptId = Department.Id
	from Department 
	join inserted
	on inserted.DeptName = Department.DeptName

	if(@DeptId is null)
	begin
		raiserror('Invalid Department Name. Statement terminated', 16, 1)
		return
	end

	insert into EmployeeTrigger(Id, Name, Baraban, DepartmentId)
	select Id, Name, Baraban, @DeptId
	from inserted
end
--- raiserror funktsioon
-- selle eesmärk on välja tuua veateade, kui DepartmentName veerus ei ole väärtust
-- ja ei ühti sisestatud väärtusega
-- esimene parameeter on veateate sisu, teiene on veatase (nr 16 tähendab üldiseid vigu),
-- kolmas on veaolek

insert into vEmployeeDetails values(7, 'Valarie', 'Female', 'assd')

delete from EmployeeTrigger where Id = 7
--- 10 tund SQL
select * from EmployeeTrigger
select * from vEmployeeDetails


update vEmployeeDetails
set DeptName = 'Payroll'
where Id = 2

--- teeme vaate
alter view vEmployeeDetailsUpdate
as
select EmployeeTrigger.Id, Name, Salary, Baraban, DeptName
from EmployeeTrigger
join Department
on EmployeeTrigger.DepartmentId = Department.Id

select * from vEmployeeDetailsUpdate
update EmployeeTrigger set DepartmentId = 4
where Id = 4

--- loome triggeri
alter trigger trEmployeeDetailsInsteadOfUpdate
on vEmployeeDetailsUpdate
instead of update
as begin
	if(update(Id))
	begin
		raiserror('Id cannot be changed', 16, 1)
		return
	end

	if(UPDATE(DeptName))
	begin
		declare @DeptId int
		select @DeptId = Department.Id
		from Department
		join inserted
		on inserted.DeptName = Department.DeptName

		if(@DeptId is null)
		begin
			raiserror('Invalid Department Name', 16, 1)
			return
		end

		update EmployeeTrigger set DepartmentId = @DeptId
		from inserted
		join EmployeeTrigger
		on EmployeeTrigger.Id = inserted.Id
	end

	if(update(Baraban))
	begin
		update EmployeeTrigger set Baraban = inserted.Baraban
		from inserted
		join EmployeeTrigger
		on EmployeeTrigger.Id = inserted.Id
	end

	if(UPDATE(Name))
	begin
		update EmployeeTrigger set Name = inserted.Name
		from inserted
		join EmployeeTrigger
		on EmployeeTrigger.Id = inserted.Id
	end

	if(UPDATE(Salary))
	begin
		update EmployeeTrigger set Salary = inserted.Salary
		from inserted
		join EmployeeTrigger
		on EmployeeTrigger.Id = inserted.Id
	end
end

select * from EmployeeTrigger

update vEmployeeDetailsUpdate
set Name = 'Johny', Baraban = 'Female', DeptName = 'IT'
where Id = 1


--- delete trigger

create trigger trEmployeeDetails_InsteadOfDelete
on vEmployeeDetails
instead of delete
as begin
	delete EmployeeTrigger
	from EmployeeTrigger
	join deleted
	on EmployeeTrigger.Id = deleted.Id
end

delete from vEmployeeDetails where Id = 2
--- kui seda triggerit ei oleks, siis annaks veateate



